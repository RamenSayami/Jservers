package jservers;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import com.example.ramen.menu.Model.Order;
import com.example.ramen.menu.Model.OrderStatus;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.LayoutStyle.ComponentPlacement;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 *
 * @author Ramen
 */
public class KitchenInterface extends javax.swing.JFrame {
	private static Order order;
	private KitchenInterface kI;
	// Socket client;
	// Socket socket;

	public List<Order> mainOrderList = new ArrayList<Order>();

	static Socket s;
	static DataInputStream din;
	static DataOutputStream dout;

	DataInputStream dis = null;
	public SocketServer server;
	Socket socket;
	public Thread serverThread;

	/**
	 * Creates new form NewJFrame
	 */
	public KitchenInterface() {
		// this.order = new Order(2, "MO: MO:", 3, OrderStatus.UNCOOKED, 200);
		initComponents();
		server = new SocketServer(this);
		StartButton.setEnabled(false);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		OrderPane = new javax.swing.JScrollPane();
		OrderInTable = new javax.swing.JTable();
		StartButton = new JButton();
		CookingButton = new JButton();
		CookedButton = new JButton();
		TopText = new javax.swing.JLabel();
		DeliveryPane = new javax.swing.JScrollPane();
		DeliveryTable = new javax.swing.JTable();
		BottomText = new javax.swing.JLabel();
		DeliveredButton = new javax.swing.JButton();
		DeliveredButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				DeliveredButtonActionPerformed(e);

			}
		});

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		OrderInTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {}, new String[] { "Table", "Dish", "Quantity",
						"Status" }) {
			private static final long serialVersionUID = 1L;
			Class[] types = new Class[] { java.lang.Integer.class,
					java.lang.String.class, java.lang.Integer.class,
					java.lang.String.class, java.lang.Integer.class };
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		OrderPane.setViewportView(OrderInTable);

		StartButton.setText("Start Server");
		StartButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				StartButtonActionPerformed(evt);
			}
		});

		CookingButton.setText("Cooking");
		CookingButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CookingButtonActionPerformed(evt);
			}
		});

		CookedButton.setText("Cooked");
		CookedButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CookedButtonActionPerformed(evt);
			}
		});

		TopText.setText("ORDERS IN :::");

		DeliveryTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {}, new String[] { "Table Number", "Dish",
						"Quantity" }) {
			Class[] types = new Class[] { java.lang.Integer.class,
					java.lang.String.class, java.lang.Integer.class };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}
		});
		DeliveryPane.setViewportView(DeliveryTable);

		BottomText.setText("DELIVERIES :::");

		DeliveredButton.setText("Delivered");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		layout.setHorizontalGroup(layout
				.createParallelGroup(Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(32)
								.addGroup(
										layout.createParallelGroup(
												Alignment.LEADING)
												.addComponent(BottomText)
												.addGroup(
														layout.createParallelGroup(
																Alignment.LEADING,
																false)
																.addComponent(
																		DeliveryPane,
																		GroupLayout.DEFAULT_SIZE,
																		730,
																		Short.MAX_VALUE)
																.addComponent(
																		TopText)
																.addComponent(
																		OrderPane,
																		GroupLayout.PREFERRED_SIZE,
																		816,
																		GroupLayout.PREFERRED_SIZE)))
								.addContainerGap(29, Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup().addGap(74)
								.addComponent(StartButton).addGap(206)
								.addComponent(CookingButton).addGap(215)
								.addComponent(CookedButton)
								.addContainerGap(84, Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup().addGap(370)
								.addComponent(DeliveredButton)
								.addContainerGap(406, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(8)
								.addComponent(TopText)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(OrderPane,
										GroupLayout.PREFERRED_SIZE, 288,
										GroupLayout.PREFERRED_SIZE)
								.addGap(18)
								.addGroup(
										layout.createParallelGroup(
												Alignment.BASELINE)
												.addComponent(StartButton)
												.addComponent(CookingButton)
												.addComponent(CookedButton))
								.addGap(48)
								.addComponent(BottomText)
								.addGap(18)
								.addComponent(DeliveryPane,
										GroupLayout.PREFERRED_SIZE, 100,
										GroupLayout.PREFERRED_SIZE).addGap(18)
								.addComponent(DeliveredButton)
								.addContainerGap(66, Short.MAX_VALUE)));
		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_UnCookedButtonActionPerformed
		// TODO add your handling code here:
		// server = new SocketServer(this);
		// StartButton.setEnabled(false);

		/*
		 * try{
		 * 
		 * String msgout = "default Text"; // msgout = msg_area.getText();
		 * dout.writeUTF(msgout); // may cause IO exception }catch(Exception e){
		 * //IO exception } DefaultTableModel model = (DefaultTableModel)
		 * OrderInTable.getModel(); model.addRow(new
		 * Object[]{order.getTableNo(),
		 * order.getDishName(),order.getQuantity(),order.getStatus()});
		 *///
			// try{
		// client = new Socket(this);
		// clientThread = new Thread(client);
		// clientThread.start();
		// client.send(new Message("test", "testUser", "testContent",
		// "SERVER"));
		// }
		// catch(Exception ex){
		// jTextArea1.append("[Application > Me] : Server not found\n");
		// }

	}// GEN-LAST:event_UnCookedButtonActionPerformed

	private void CookingButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CookingButtonActionPerformed
		// TODO add your handling code here:

		TableModel model = OrderInTable.getModel();
		int[] index = OrderInTable.getSelectedRows();
		Object rowData[] = new Object[5];
		DefaultTableModel model2 = (DefaultTableModel) OrderInTable.getModel();
		if (index.length > 0) {
			for (int i = 0; i < index.length; i++) {
				rowData[0] = model.getValueAt(index[i], 0);
				rowData[1] = model.getValueAt(index[i], 1);
				rowData[2] = model.getValueAt(index[i], 2);
				rowData[3] = model.getValueAt(index[i], 3);
				if (!rowData[3].equals("ORDER_IN")) {
					JOptionPane.showMessageDialog(null,
							"Only select ORDER_IN row");
					continue;
				}
				rowData[3] = OrderStatus.COOKING.toString();
				// rowData[4] = model.getValueAt(index[i], 4);
				model2.removeRow(index[i]);
				model2.addRow(rowData);
			}
		}
	}// GEN-LAST:event_CookingButtonActionPerformed

	private void DeliveredButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO send data to cashier
	}

	private void CookedButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CookedButtonActionPerformed
		// TODO add your handling code here:
		DefaultTableModel model = (DefaultTableModel) OrderInTable.getModel();
		int[] index = OrderInTable.getSelectedRows();
		Object rowData[] = new Object[5];

		for (int i = 0; i < index.length; i++) {
			rowData[0] = model.getValueAt(index[i], 0);
			rowData[1] = model.getValueAt(index[i], 1);
			rowData[2] = model.getValueAt(index[i], 2);
			rowData[3] = model.getValueAt(index[i], 3);
			if (!rowData[3].equals("COOKING")) {
				JOptionPane.showMessageDialog(null, "Only select COOKING row");
				break;
			}
			rowData[3] = OrderStatus.COOKED.toString();
			// rowData[4] = model.getValueAt(index[i], 4);

			model.removeRow(index[i]);
			DefaultTableModel model2 = (DefaultTableModel) DeliveryTable
					.getModel();
			Object deliveryData[] = new Object[3];
			deliveryData[0] = rowData[0];
			deliveryData[1] = rowData[1];
			deliveryData[2] = rowData[2];
			model2.addRow(deliveryData);
		}

	}// GEN-LAST:event_CookedButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel BottomText;
	private JButton CookedButton;
	private JButton CookingButton;
	private JButton DeliveredButton;
	private javax.swing.JScrollPane DeliveryPane;
	private javax.swing.JTable DeliveryTable;
	public javax.swing.JTable OrderInTable;
	private javax.swing.JScrollPane OrderPane;
	private javax.swing.JLabel TopText;
	private JButton StartButton;

	// End of variables declaration//GEN-END:variables

	// private final ArrayList<Order> orderList= new ArrayList<>();

	/**
	 * 
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger
					.getLogger(KitchenInterface.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger
					.getLogger(KitchenInterface.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger
					.getLogger(KitchenInterface.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger
					.getLogger(KitchenInterface.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>
		// </editor-fold>
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new KitchenInterface().setVisible(true);

			}
		});

		// try{
		// s = new Socket("localhost",13000);
		// din = new DataInputStream(s.getInputStream());
		// dout = new DataOutputStream(s.getOutputStream());
		// String msgin="";
		// while(!msgin.equals("exit")){
		// msgin = din.readUTF();
		// // msg_area.setText(msgin);
		// System.out.println(msgin);
		// }
		// }
		// catch(Exception e){
		//
		// }
	}

	public void RetryStart(int port) {
		if (server != null) {
			server.stop();
		}
		server = new SocketServer(this, port);
	}

	public void addToList(Order order) {
		mainOrderList.add(order);
		updateList();
	}

	public void updateList() {
		if (!mainOrderList.isEmpty()) {
			for (Order orderRow : mainOrderList) {
				DefaultTableModel model = (DefaultTableModel) OrderInTable
						.getModel();
				model.addRow(new Object[] { orderRow.getTableNo(),
						orderRow.getDishName(), orderRow.getQuantity(),
						orderRow.getStatusString() });				
			}
		}
	}
	
	public void updateList(int pos, Order order){
		mainOrderList.remove(pos);
		mainOrderList.add(order);
		updateList();
		
	}
}
